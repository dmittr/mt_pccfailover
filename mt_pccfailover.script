################## Variables ##################
:global LOG 1
:global OUT 1
:local PINGCOUNT 10
:local TARGETS [ :toarray "8.8.8.8,8.8.4.4,77.88.8.8,77.88.8.1" ]
:local TIMEOUT "0.2"
:local LOSTTOLERANCE 1
:local COMMENT "--ispswitch script--"
:local LANIFLIST "LAN"
:local WANIFLIST "WAN"

###############################################
:global LASTCHANGE
:local WANIF
:local IFNAME
:local IFADDR
:local IFADDRMASK
:local IFROUTE
:local SKIP
:local MSG
:local WANS
:local WANARRAY
:local WANCOUNT 0
:local WANBACKUP
:local WEIGHT
:local WEIGHTSUMM 0
:local RCVD
:local SENT
:local LOST
:local LOSTMINIMUM 9999
:local COUNTER

################## Functions ##################
:local OUTLOG do={
	:global LOG
	:global OUT
	if ( $OUT > 0 ) do {
		:put "$1"
	}
	if ( $LOG > 0 ) do {
		:log info "$1"
	}
}


:set MSG "Start!\n\r LOG=$LOG\n\r OUT=$OUT"
if ( $OUT > 0 ) do {
	:put "$MSG"
}

if ( [ /interface list member find list=$WANIFLIST ] = "" ) do={
	:error "Create interface list $WANIFLIST and fill it"
}

:set WANIF [ /interface list member find list=$WANIFLIST ]

:foreach IF in=$WANIF do={
	:set SKIP 0
	:set IFNAME [ /interface list member get $IF interface ]
	:set IFADDR 0
	:set IFROUTE 0
	if ( [ /ip address get [ /ip address find interface=$IFNAME ] address ] = "" ) do={
		:set SKIP 1
	} else= {
		:set IFADDRMASK [ /ip address get [ /ip address find interface=$IFNAME ] address ]
		:set IFADDR [ :pick $IFADDRMASK 0 [:find $IFADDRMASK "/" ] ]
	}
	if ( [ /ip route find comment~"ISP-$IFNAME" ] = "" ) do={
		:set SKIP 1
	} else={
		:set IFROUTE [ /ip route get [ /ip route find comment~"ISP-$IFNAME" ] gateway ]
	}
	if ( $IFADDR = 0 ) do={
		:set SKIP 1
	} 
	if ( $IFROUTE = 0 ) do={
		:set SKIP 1
	} 
	:set MSG "IFNAME=$IFNAME IFADDR=$IFADDR IFROUTE=$IFROUTE SKIP=$SKIP"
	$OUTLOG $MSG
	
	if ( $SKIP = 0 ) do={
		:set WEIGHT [ /ip route get [ /ip route find comment~"ISP-$IFNAME" ] comment ]
		:set WEIGHT [ :pick $WEIGHT ([ :find $WEIGHT "weight=" ]+7) [ :len $WEIGHT ] ]
		if ( [ :len $WEIGHT ] != 1 ) do={
			:set WEIGHT 1
		}
		if ( [ /ip route find gateway=$IFROUTE routing-mark="WAN-RM-$IFNAME" comment=$COMMENT ] = "" ) do={
			:set MSG "Creating route with mark for $IFNAME"
			$OUTLOG $MSG
			/ip route add gateway=$IFROUTE routing-mark="WAN-RM-$IFNAME" comment=$COMMENT
		}
		if ( [ /ip route rule find src-address="$IFADDR/32" table="WAN-RM-$IFNAME" comment=$COMMENT ] = "" ) do={
			:set MSG "Creating route rule for $IFNAME"
			$OUTLOG $MSG
			/ip route rule add src-address="$IFADDR/32" table="WAN-RM-$IFNAME" comment=$COMMENT
		}
		:set RCVD 0
		:set SENT 0
		:foreach TARGET in $TARGETS do={
			:for n from=1 to=$PINGCOUNT step=1 do={
				:set RCVD ( [ /ping $TARGET src-address=$IFADDR interval="$TIMEOUT" count=1 ] + $RCVD )
				:set SENT ( $SENT + 1 )
			}
		}
		:set LOST ($SENT - $RCVD)
		:set WANS ( $WANS , "$IFNAME A:$IFADDRMASK W:$WEIGHT L:$LOST" )
		:set WEIGHTSUMM ($WEIGHTSUMM + $WEIGHT)
		if ( $LOST <= $LOSTMINIMUM ) do={
			:set LOSTMINIMUM $LOST
		}
		:set MSG "Tested $IFNAME ($IFADDR) WEIGHT=$WEIGHT LOST=$LOST (min $LOSTMINIMUM)"
		$OUTLOG $MSG	
	}
}

:foreach WANIF in=$WANS do={
	:set IFNAME [ :pick $WANIF 0 [:find $WANIF " " ] ]
	:set IFADDRMASK [ :pick $WANIF ([:find $WANIF "A:"]+2) ([:find $WANIF "W:"]-1) ]
	:set WEIGHT [ :pick $WANIF ([:find $WANIF "W:"]+2) ([:find $WANIF "L:"]-1) ]
	:set LOST [ :pick $WANIF ([:find $WANIF "L:"]+2) [:len $WANIF] ]
	:set SKIP 0
	:set WANCOUNT ( $WANCOUNT + 1 )
	if ( $LOST > $LOSTMINIMUM && ($LOST+$LOSTTOLERANCE) > $LOSTMINIMUM ) do={
		:set WEIGHTSUMM ($WEIGHTSUMM - $WEIGHT)
		:set MSG "$IFNAME excluded. Terminating connections"
		$OUTLOG $MSG
		/ip firewall connection remove [/ip firewall connection find connection-mark="WAN-CON-$IFNAME"]
		:set LASTCHANGE [/system clock get time]
		:set LASTCHANGE ([:pick $LASTCHANGE 0 2] . [:pick $LASTCHANGE 3 5] . [:pick $LASTCHANGE 6 8])
		:set SKIP 1
	}
	if ( $WEIGHT = 0 ) do={
		:set SKIP 1
		:set WANBACKUP $IFNAME
	}
	:set WANCOUNT ( $WANCOUNT - $SKIP )
	:set WANARRAY ( $WANARRAY , "$IFNAME A:$IFADDRMASK W:$WEIGHT L:$LOST S:$SKIP")
}

# STEP 1
:foreach WANIF in=$WANARRAY do={
	:set IFNAME [ :pick $WANIF 0 [:find $WANIF " " ] ]
	if ( [ /ip firewall mangle find comment="$COMMENT $IFNAME step-1" ] = "" ) do={
		:set MSG "1. Marking incoming connections"
		$OUTLOG $MSG
		/ip firewall mangle add chain=input in-interface=$IFNAME action=mark-connection new-connection-mark="WAN-CON-$IFNAME" comment="$COMMENT $IFNAME step-1"
	}
}

# STEP 2
:foreach WANIF in=$WANARRAY do={
	:set IFNAME [ :pick $WANIF 0 [:find $WANIF " " ] ]
	if ( [ /ip firewall mangle find comment="$COMMENT $IFNAME step-2" ] = "" ) do={
		:set MSG "2. Marking route by connections on output"
		$OUTLOG $MSG
		/ip firewall mangle add chain=output connection-mark="WAN-CON-$IFNAME" action=mark-routing new-routing-mark="WAN-RM-$IFNAME" comment="$COMMENT $IFNAME step-2"
	}
}

# STEP 3
:foreach WANIF in=$WANARRAY do={
	:set IFNAME [ :pick $WANIF 0 [:find $WANIF " " ] ]
	:set IFADDRMASK [ :pick $WANIF ([:find $WANIF "A:"]+2) ([:find $WANIF "W:"]-1) ]
	if ( [ /ip firewall mangle find comment="$COMMENT $IFNAME step-3" ] = "" ) do={
		:set MSG "2. Allow to access ISP subnet"
		$OUTLOG $MSG
		/ip firewall mangle add chain=prerouting dst-address="$IFADDRMASK" action=accept in-interface-list=$LANIFLIST comment="$COMMENT $IFNAME step-3"
	}
}

# STEP 4
:set COUNTER 0
if ( [ /ip firewall mangle find chain=prerouting action=jump jump-target=pcc comment="$COMMENT" ] = "" ) do={
	:set MSG "4. Creating mangle on incoming for $IFNAME"
	$OUTLOG $MSG
	/ip firewall mangle add chain=prerouting action=jump jump-target=pcc comment="$COMMENT"
}	
if ( [ /ip firewall mangle find chain=pcc comment~"$COMMENT PCC-$WEIGHTSUMM" ] = "" ) do={
	:set MSG "4. Clearing firewall mangle PCC"
	$OUTLOG $MSG
	/ip firewall mangle remove [/ip firewall mangle find chain=pcc comment~"$COMMENT PCC" ]
	:foreach WANIF in=$WANARRAY do={
		:set IFNAME [ :pick $WANIF 0 [:find $WANIF " " ] ]
		:set WEIGHT [ :pick $WANIF ([:find $WANIF "W:"]+2) ([:find $WANIF "L:"]-1) ]
		:set SKIP [ :pick $WANIF ([:find $WANIF "S:"]+2) [:len $WANIF] ]
		if ( $SKIP = 0 ) do={
			:for n from=1 to=$WEIGHT step=1 do={
				/ip firewall mangle add chain=pcc in-interface-list=$LANIFLIST connection-state=new dst-address-type=!local per-connection-classifier="both-addresses-and-ports:$WEIGHTSUMM/$COUNTER" action=mark-connection new-connection-mark="WAN-CON-$IFNAME" passthrough=yes comment="$COMMENT PCC-$WEIGHTSUMM step-4"
				:set COUNTER ($COUNTER+1)
			}
			:set MSG "4. Created firewall mangle PCC for $IFNAME x$WEIGHT"
			$OUTLOG $MSG
		}
	}
}
# STEP 5
:foreach WANIF in=$WANARRAY do={
	:set IFNAME [ :pick $WANIF 0 [:find $WANIF " " ] ]
	if ( [ /ip firewall mangle find comment="$COMMENT $IFNAME step-5" ] = "" ) do={
		:set MSG "5. Marking route by connections on prerouting"
		$OUTLOG $MSG
		/ip firewall mangle add chain=prerouting connection-mark="WAN-CON-$IFNAME" in-interface-list=$LANIFLIST action=mark-routing new-routing-mark="WAN-RM-$IFNAME" comment="$COMMENT $IFNAME step-5"
	}
}
